<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.thinkjoy.saas.dao.bussiness.reform.SelectClassesGuideDAO">
    <sql id="enrolling_plan_zj">

        from zgk2.zgk_zj_3in7 zz
        INNER join zgk2.zgk_university uu on uu.id=zz.universityId
    </sql>
    <sql id="enrolling_plan_zj_groupby">
        group by zz.eduLevel,zz.universityId,zz.major
    </sql>
    <!--<sql id="enrolling_plan_zj_groupby_bak">-->
    <!--group by tmp.majorType,zz.eduLevel,tmp.universityId,zz.major-->
    <!--</sql>-->
    <!--<sql id="enrolling_plan_zj_bak">-->
    <!--select zz.id as majorCode,uu.id as universityId-->
    <!--from zgk2.zgk_university_major_enrolling_plan_zj tmp-->
    <!--INNER join zgk2.zgk_zj_3in7 zz on tmp.majorCode=zz.majorCode and tmp.universityId=zz.universityId-->
    <!--INNER join zgk2.zgk_university uu on uu.id=tmp.universityId-->
    <!--</sql>-->
    <!-- 科目分析 -->
    <select id="selectUniversityAndMajorNumber" parameterType="java.util.Map" resultType="cn.thinkjoy.saas.dto.UniversityAndMajorNumberDto">
        select count(tt.majorCode) as majorNumber , count(DISTINCT tt.universityId) as universityNumber
        from (
        select zz.id as majorCode,uu.id as universityId
        <include refid="enrolling_plan_zj" />
        where 1=1
        <if test="subject!=null">
            and zz.selectCount!=0 and zz.selectSubject like CONCAT('%',#{subject},'%')
        </if>
        <if test="subject==null">
            and zz.selectCount=0
        </if>
        <include refid="enrolling_plan_zj_groupby" />
        ) tt
    </select>

    <!-- 输入院校名 -->
    <select id="selectMajorByUniversityNameAndBatch" parameterType="java.util.Map" resultType="cn.thinkjoy.saas.dto.MajorDto">
        select
        <if test="flag==0">
            DISTINCT uu.id as universityId,uu.name as universityName
        </if>
        <if test="flag==1">
            zz.majorCode as majorCode,zz.major as majorName,uu.id as universityId,uu.name as universityName,uu.rank as rank,dd.name as batchName,zz.planEnrolling as planNumber,uu.property as property, zz.selectSubject as selSubject
        </if>
        <include refid="enrolling_plan_zj" />
        left join zgk2.zgk_data_dict dd on dd.type='BATCHTYPE' and dd.dictId=zz.batch
        where 1=1
        <if test="subject!=null">
            and zz.selectCount!=0 and zz.selectSubject like CONCAT('%',#{subject},'%')
        </if>
        <if test="subject==null">
            and zz.selectCount=0
        </if>
        <if test="universityName!=null">
            and uu.name like concat('%',#{universityName},'%')
        </if>
        <if test="universityId!=null">
            and uu.id = #{universityId}
        </if>
        <include refid="enrolling_plan_zj_groupby" />
        order by uu.educationLevel,if(isnull(uu.rank),10000,uu.rank) asc
        limit ${offset}, ${rows}
    </select>

    <select id="selectMajorByUniversityNameAndBatchCount" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(*) from (select
        count(zz.majorCode)
        <include refid="enrolling_plan_zj" />
        left join zgk2.zgk_data_dict dd on dd.type='BATCHTYPE' and dd.dictId=zz.batch
        where 1=1
        <if test="subject!=null">
            and zz.selectCount!=0 and zz.selectSubject like CONCAT('%',#{subject},'%')
        </if>
        <if test="subject==null">
            and zz.selectCount=0
        </if>
        <if test="universityName!=null">
            and uu.name like concat('%',#{universityName},'%')
        </if>
        <if test="universityId!=null">
            and uu.id = #{universityId}
        </if>
        <include refid="enrolling_plan_zj_groupby" />) tmp2
    </select>

    <!-- 211,包含了985 -->
    <select id="selectPlanEnrollingByProperty" parameterType="java.util.Map" resultType="cn.thinkjoy.saas.dto.PlanEnrollingDto">
        select   uu.property as property,zz.planEnrolling as planEnrolling
        <include refid="enrolling_plan_zj" />
        where 1=1
        <if test="subject!=null">
            and zz.selectCount!=0 and zz.selectSubject like CONCAT('%',#{subject},'%')
        </if>
        <if test="subject==null">
            and zz.selectCount=0
        </if>
        and uu.property like CONCAT('%',#{property},'%')
    </select>
    <select id="selectPlanEnrollingByPropertyCount" parameterType="java.util.Map" resultType="java.lang.Integer">
        select   count(uu.property)
        <include refid="enrolling_plan_zj" />
        where 1=1
        <if test="subject!=null">
            and zz.selectCount!=0 and zz.selectSubject like CONCAT('%',#{subject},'%')
        </if>
        <if test="subject==null">
            and zz.selectCount=0
        </if>
        and uu.property like CONCAT('%',#{property},'%')
    </select>

    <!-- 按批次分析 -->
    <select id="selectAnalysisBatch" parameterType="java.util.Map" resultType="cn.thinkjoy.saas.dto.AnalysisDto">
        select dd.name as batchName,sum(zz.planEnrolling) as number
        <include refid="enrolling_plan_zj" />
        left join zgk2.zgk_data_dict dd on dd.type='BATCHTYPE' and dd.dictId=zz.batch
        where 1=1
        <if test="subject!=null">
            and zz.selectCount!=0 and zz.selectSubject like CONCAT('%',#{subject},'%')
        </if>
        <if test="subject==null">
            and zz.selectCount=0
        </if>
        group by zz.batch
    </select>
    <select id="selectAnalysisBatchCount" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(DISTINCT zz.batch)
        <include refid="enrolling_plan_zj" />
        where 1=1
        <if test="subject!=null">
            and zz.selectCount!=0 and zz.selectSubject like CONCAT('%',#{subject},'%')
        </if>
        <if test="subject==null">
            and zz.selectCount=0
        </if>
    </select>

    <!-- 按专业类别分析 -->
    <select id="selectAnalysisDiscipline" parameterType="java.util.Map" resultType="cn.thinkjoy.saas.dto.AnalysisDto">
        select bb.discipline_name as disciplineName,sum(zz.planEnrolling) as number
        <include refid="enrolling_plan_zj" />
        INNER join zgk2.zgk_major_base bb on bb.major_type=1 and bb.major_code=zz.majorCode
        where 1=1
        <if test="subject!=null">
            and zz.selectCount!=0 and zz.selectSubject like CONCAT('%',#{subject},'%')
        </if>
        <if test="subject==null">
            and zz.selectCount=0
        </if>
        group by bb.discipline_code
    </select>
    <select id="selectAnalysisDisciplineCount" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(DISTINCT bb.discipline_code)
        <include refid="enrolling_plan_zj" />
        INNER join zgk2.zgk_major_base bb on bb.major_type=1 and bb.major_code=zz.majorCode
        where 1=1
        <if test="subject!=null">
            and zz.selectCount!=0 and zz.selectSubject like CONCAT('%',#{subject},'%')
        </if>
        <if test="subject==null">
            and zz.selectCount=0
        </if>
    </select>

    <select id="queryDictList" parameterType="java.util.Map" resultType="java.util.Map">
        select  dictId as id,name
        from zgk2.zgk_data_dict where type=#{type}
    </select>

    <select id="selectEnrollingNumberByBatch" parameterType="java.util.Map" resultType="cn.thinkjoy.saas.dto.TrineDto">
        select dd.name as batchName,count(pp.majorCode) as majorNumber,sum(pp.planEnrolling) as planEnrollingNumber
        from zgk2.zgk_university_major_enrolling_plan_zj pp
        left join zgk2.zgk_data_dict dd on dd.type='BATCHTYPE' and dd.dictId=pp.batch
        where pp.areaId=#{areaId} and pp.year=#{year} and pp.majorCode is not null
        group by pp.batch;
    </select>

    <select id="selectEnrollingNumber" parameterType="java.util.Map" resultType="cn.thinkjoy.saas.dto.EnrollingNumberDto">
        select dd.name as batchName,count(DISTINCT pp.universityId) as universityNumber,sum(pp.planEnrolling) as planEnrollingNumber,pp.year as year
        from zgk2.zgk_university_major_enrolling_plan_zj pp
        left join zgk2.zgk_data_dict dd on dd.type='BATCHTYPE' and dd.dictId=pp.batch
        where  pp.areaId=#{areaId} and pp.year=#{year} and pp.majorCode is not null
        group by pp.batch,pp.year
    </select>

    <!-- 根据年级查询学校内学生选课情况 -->
    <select id="getAnalysisGroup" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
            CONCAT(student_check_major1,'-',student_check_major2,'-',student_check_major3) AS 'group',
            count(*) AS stuNumber
        FROM
        ${table}
        WHERE
        student_grade LIKE CONCAT('%',#{grade},'%')
        and student_check_major1 is not null
        GROUP BY
        student_check_major1,student_check_major2,student_check_major3
    </select>

    <!-- 查询对租户的的应项目里有没有对应属性 -->
    <select id="selectEnName" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(*) from saas_tenant tt
        left join saas_tenant_config_instance ii on tt.id=ii.tn_id
        left join saas_configuration cc on ii.config_key=cc.id
        where ii.tn_id=#{tnId} and ii.domain=#{domain} and cc.en_name=#{enName}
    </select>

    <select id="selectStudentExcel" parameterType="java.util.Map" resultType="java.util.Map">
        select t1.id,gg.year as class_in_year,CONCAT(t1.student_check_major1,'-',t1.student_check_major2,'-',t1.student_check_major3) as student_major_type
        from ${tableName} t1
        INNER JOIN
        (select  class_grade,class_name from ${classTableName1}
        UNION ALL
        select  class_grade,class_name from ${classTableName2})
        t2 on t1.student_grade=t2.class_grade and t1.student_class=t2.class_name
        INNER JOIN
        saas_grade gg
        on gg.tnId=#{tnId} and gg.grade=t2.class_grade
        <if test="grade!=null">
          where t1.student_grade LIKE CONCAT('%',#{grade},'%')
        </if>
    </select>

    <!-- 最近一年录取百分比 -->
    <select id="getEnrollingPercent" parameterType="java.util.Map" resultType="java.lang.String">
        select (batch_1_enrolls+batch_2_enrolls+batch_3_enrolls)/stu_3_numbers as percent from saas_enrolling_ratio rr
        where tn_id=#{tnId}
        ORDER BY year desc
        limit 1
    </select>

    <!-- 查询最后一次考试的考试Id -->
    <select id="selectExamId" parameterType="java.util.Map" resultType="java.lang.String">
        select ee.id from saas_exam ee where ee.tnId=#{tnId} and grade LIKE CONCAT('%',#{grade},'%')
        order by createDate DESC
        limit 1
    </select>

    <!-- 查询所有参加本次考试的学生 -->
    <select id="selectStudentNumber" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(*) from saas_exam_detail dd where dd.examId=#{examId}
    </select>

    <!-- 查询上线考试的学生 -->
    <select id="selectLimitStudent" parameterType="java.util.Map" resultType="java.lang.String">
        select dd.selectCourses from saas_exam_detail dd where dd.examId=#{examId}
        ORDER BY totleScore DESC
        <if test="top!=null">
            limit ${top};
        </if>
    </select>

    <!-- 根据年级动态获取教师集合 -->
    <select id="queryTeachersByGrade" parameterType="map" resultType="TeacherAndClassDto">
        SELECT
            id AS teacherId,
            teacher_name AS teacherName,
            teacher_grade AS grade,
            teacher_class AS className,
            teacher_max_take_class AS maxClass,
            teacher_major_type as courseName
        FROM
            ${table}
        WHERE
            teacher_grade LIKE CONCAT('%',#{grade},'%')
    </select>

    <!-- 根据租户ID查询教室容量 -->
    <select id="queryClassRoomByTnId" parameterType="int" resultType="java.lang.Integer">
        SELECT
            max_number
        FROM
            saas_class_room_setting
        WHERE
            tn_id = #{tnId}
            limit 1
    </select>

    <!-- 查询所有年份的本科录取人数 -->
    <select id="selectUndergraduateEnrollingNumber" parameterType="java.util.Map" resultType="java.util.Map">
        select year as year,batch_1_enrolls+batch_2_enrolls+batch_3_enrolls as number
        from saas_enrolling_ratio where tn_id=#{tnId}
        group by year
        order by year desc
    </select>

</mapper>
